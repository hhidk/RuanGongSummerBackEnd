<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.diamond.mapper.MemberMapper">

    <insert id="addMember" parameterType="Member">
        insert
        into Member(userID, userIdentity, teamID, lastVisitTime)
        VALUES (#{userID}, #{userIdentity}, #{teamID}, GETDATE());
    </insert>

    <select id="getCollaboratorNum" parameterType="String" resultType="int">
        select count(distinct B.userID)
        from Member as A, Member as B
        where A.userID = #{userID} and A.teamID = B.teamID and A.userID != B.userID;
    </select>

    <update id="updateDocUserIdentity" parameterType="Map">
        update Member
        set userIdentity = #{userIdentity}
        where userID = #{userID}
    </update>

    <update id="updateLastVisitTime" parameterType="String">
        update Member
        set lastVisitTime = getdate()
        where userID = #{userID} and teamID = #{teamID}
    </update>

    <select id="getDocUserIdentity" parameterType="String" resultType="int">
        select userIdentity
        from Member
        where userID = #{userID} and teamID = #{teamID}
    </select>

    <select id="checkIsInGroup" parameterType="String" resultType="Member">
        select *
        from Member
        where userID = #{userID} and teamID = #{teamID}
    </select>

    <select id="getTeamByUserID" parameterType="String" resultType="Team">
        select Team.teamID, teamName, creatorID
        from Team, Member
        where Member.userID = #{userID}) and Team.teamID = Member.teamID
        order by lastVisitTime desc
    </select>

    <select id="getTeamMemberByTeamID" parameterType="String" resultType="DocUser">
        select *
        from DocUser
        where DocUser.userID in (select Member.userID from Member where Member.teamID = #{teamID});
    </select>

    <select id="getTeamMemberPreviewByTeamID" parameterType="String" resultType="MemberPreview">
        select DocUser.userID, userName, userIdentity, emailAddress, imagePath
        from Member,DocUser
        where Member.teamID = #{teamID} and Member.userID = DocUser.userID;
    </select>

    <select id="getTeamMemberPreviewByTeamIDWithSearch" parameterType="String" resultType="MemberPreview">
        select DocUser.userID, userName, userIdentity, emailAddress, imagePath
        from Member,DocUser
        where Member.teamID = #{teamID} and Member.userID = DocUser.userID and userName like #{searchText}
    </select>

    <select id="getDocByTeamID" parameterType="String" resultType="Doc">
        select *
        from Doc
        where teamID = #{teamID};
    </select>

    <delete id="deleteMember" parameterType="Map">
        delete
        from Member
        where userID = #{userID} and teamID = #{teamID}
    </delete>

    <update id="setAdmin" parameterType="Map">
        update Member
        set userIdentity = #{userIdentity}
        where userID = #{userID} and teamID = #{teamID}
    </update>

</mapper>